name: Collect and Test Proxy Configs

on:
  workflow_dispatch:  # اجرای دستی از طریق GitHub UI
  schedule:
    # اجرا هر روز ساعت 00:00 UTC (برای بروزرسانی خودکار کانفیگ‌ها)
    - cron: '0 0 * * *'

jobs:
  collect-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # اجازه write برای push کردن

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install Qt6
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.*'
        modules: 'qtnetworkauth'
        cache: true

    - name: Install CMake and Build Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    - name: Verify Qt Installation
      run: |
        echo "Qt6 Path: $Qt6_DIR"
        qmake --version
        cmake --version

    - name: Configure CMake
      working-directory: main
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release ..

    - name: Build Project
      working-directory: main/build
      run: |
        cmake --build . --config Release -j$(nproc)

    - name: Verify Data Files Exist
      run: |
        echo "=== Checking data directory ==="
        ls -lh data/
        echo ""
        echo "=== Sub.txt content preview ==="
        head -5 data/Sub.txt || echo "Sub.txt not found!"
        echo ""
        echo "=== Creating Config directory ==="
        mkdir -p data/Config
        ls -lh data/

    - name: Run ConfigCollector
      working-directory: main/build
      run: |
        pwd
        echo "Current directory: $(pwd)"
        echo "Checking relative path to data:"
        ls -lh ../../data/Sub.txt || echo "Sub.txt not found at ../../data/Sub.txt"
        echo ""
        ./ConfigCollector
      timeout-minutes: 30
      continue-on-error: true

    - name: Check Generated Configs
      run: |
        echo "=== Generated Config Files ==="
        ls -lh data/Config/ || echo "No config files found"
        echo ""
        echo "=== Total Configs Count ==="
        CONFIG_COUNT=$(find data/Config/ -name "*.json" 2>/dev/null | wc -l)
        echo "Total configs collected: $CONFIG_COUNT"

    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install Xray-core
      run: |
        echo "=== Installing Xray-core ==="
        wget https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip
        unzip -q Xray-linux-64.zip -d xray-core
        chmod +x xray-core/xray
        sudo mv xray-core/xray /usr/local/bin/xray
        xray version

    - name: Build ProxyTester
      working-directory: test
      run: |
        echo "=== Building ProxyTester ==="
        go build -o proxy-tester proxy-tester.go
        ls -lh proxy-tester

    - name: Create Working Directories
      run: |
        mkdir -p data/working_json
        mkdir -p data/working_url

    - name: Run ProxyTester
      working-directory: test
      run: |
        echo "=== Running ProxyTester ==="
        ./proxy-tester
      continue-on-error: true

    - name: Check Test Results
      run: |
        echo "=== Working Configurations ==="
        if [ -d "data/working_url" ]; then
          echo "Files in working_url:"
          ls -lh data/working_url/ || echo "No files found"
          echo ""
          echo "=== Total Working Configs ==="
          if [ -f "data/working_url/working_all_urls.txt" ]; then
            WORKING_COUNT=$(grep -v "^#" data/working_url/working_all_urls.txt | grep -c "://")
            echo "Total working configs: $WORKING_COUNT"
          else
            echo "No working configs file found"
          fi
        else
          echo "working_url directory not found"
        fi

    - name: Commit and Push Working Configs to Repository
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"

        # Add working configs to git
        git add data/working_url/

        # Check if there are changes
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "🤖 Auto-update: Working proxy configs ($(date '+%Y-%m-%d %H:%M:%S'))"
          git push
          echo "✅ Successfully pushed working configs to repository"
        fi

    - name: Upload Working Configs as Artifact (Backup)
      uses: actions/upload-artifact@v4
      with:
        name: working-configs-${{ github.run_number }}
        path: data/working_url/
        retention-days: 30
        if-no-files-found: warn

    - name: Final Summary Report
      if: always()
      run: |
        echo "# 🚀 Proxy Testing Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # ConfigCollector Stats
        CONFIG_COUNT=$(find data/Config/ -name "*.json" 2>/dev/null | wc -l)
        echo "## 📥 ConfigCollector Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Configs Collected**: $CONFIG_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # ProxyTester Stats
        echo "## ✅ ProxyTester Results" >> $GITHUB_STEP_SUMMARY
        if [ -f "data/working_url/working_all_urls.txt" ]; then
          WORKING_COUNT=$(grep -v "^#" data/working_url/working_all_urls.txt | grep -c "://" || echo "0")
          SUCCESS_RATE=$(echo "scale=2; $WORKING_COUNT * 100 / $CONFIG_COUNT" | bc || echo "0")
          echo "- **Working Configs**: $WORKING_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Success Rate**: ${SUCCESS_RATE}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Protocol breakdown
          echo "### Protocol Breakdown:" >> $GITHUB_STEP_SUMMARY
          for protocol in vmess vless trojan shadowsocks; do
            if [ -f "data/working_url/working_${protocol}_urls.txt" ]; then
              COUNT=$(grep -v "^#" "data/working_url/working_${protocol}_urls.txt" | grep -c "://" || echo "0")
              if [ "$COUNT" -gt 0 ]; then
                echo "- **${protocol^^}**: $COUNT" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
        else
          echo "- **Working Configs**: 0 (No working configs found)" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Metadata" >> $GITHUB_STEP_SUMMARY
        echo "- **Run Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow**: Build → Collect → Test → Filter" >> $GITHUB_STEP_SUMMARY
